package com.tween.viacelular.data;

import android.content.Context;
import com.tween.viacelular.R;
import com.tween.viacelular.models.Land;
import com.tween.viacelular.models.Migration;
import com.tween.viacelular.models.Suscription;
import com.tween.viacelular.services.ApiConnection;
import com.tween.viacelular.utils.Common;
import com.tween.viacelular.utils.StringUtils;
import org.json.JSONArray;
import org.json.JSONObject;
import java.util.ArrayList;
import java.util.List;
import io.realm.Realm;

public class Company
{
	private Long	id;
	private String	companyId;
	private String	name;
	private String	countryCode;
	private String	industryCode;
	private String	industry;
	private Integer	type;
	private String	image;
	private String	colorHex;
	private String	fromNumbers;
	private String	keywords;
	private String	unsuscribe;
	private Integer	size;
	private Integer	status;
	private Integer	silenced;
	private Integer	blocked;
	private String	email;
	private String	firstName;
	private String	lastName;
	private String	password;
	private Integer	receive;
	private Integer	suscribe;
	private String	url;
	private String	phone;
	private String	msgExamples;
	private String	about;
	private String	identificationKey;
	private Integer	dataSent;
	private String	identificationValue;
	private Integer	follower;
	private Integer	gray;

	//Actualización de types
	public static final int TYPE_AUTOGENERATED			= 0;
	public static final int TYPE_NEWUSER				= 1;
	public static final int TYPE_FREE_REGISTERED		= 2;
	public static final int TYPE_PRO_REGISTERED			= 3;
	public static final int TYPE_BLOCK					= 4;
	public static final int TYPE_ONG					= 5;
	public static final int STATUS_ACTIVE				= 0;
	public static final int STATUS_INACTIVE				= 1;
	public static final int STATUS_BLOCKED				= 2;
	public static final String NUMBER_FREE				= "free";
	public static final String NUMBER_PAYOUT			= "payout";
	public static final String KEY_API					= "companyId";
	public static final String KEY_SILENCED				= "silenced";
	public static final String KEY_BLOCKED				= "blocked";
	public static final String KEY_IMAGE				= "image";
	public static final String KEY_COLOR				= "colorHex";
	public static final String KEY_NUMBERS				= "fromNumbers";
	public static final String KEY_KEYWORDS				= "keywords";
	public static final String KEY_UNSUSCRIBE			= "unsuscribe";
	public static final String KEY_SIZE					= "size";
	public static final String KEY_INDUSTRYCODE			= "industryCode";
	public static final String KEY_INDUSTRY				= "industry";
	public static final String KEY_EMPLOYEES			= "employees";
	public static final String KEY_RECEIVE				= "receive";
	public static final String KEY_FROM					= "from";
	public static final String KEY_SUSCRIBE				= "suscribe";
	public static final String KEY_URL					= "url";
	public static final String KEY_MSGEXAMPLES			= "msgExamples";
	public static final String KEY_ABOUT				= "about";
	public static final String KEY_IDENTIFICATIONKEY	= "identificationKey";
	public static final String KEY_IDENTIFICATIONVALUE	= "identificationValue";
	public static final String KEY_DATASENT				= "dataSent";
	public static final String KEY_FOLLOWER				= "follower";
	public static final String KEY_GRAY					= "gray";
	public static final String COMPANY_ID_VC			= "vc1";
	public static final String COMPANY_ID_VC_LONG		= "viacelular";
	public static final String COMPANY_ID_VC_MONGO		= "57029b3381576d943c9dc9d3";
	public static final String DEFAULT_SENDER			= "26100";
	public static final String ICON_APP					= ApiConnection.CLOUDFRONT_S3+"via-celular/via-celular@3x.png";

	public Company()
	{
	}

	public Company(	String name, String industry, String industryCode, String email, String fromNumbers, Integer silenced, Integer blocked, String image, String colorHex, Integer type,
					String keywords, String unsuscribe, Integer status, String countryCode, String companyId, Integer size, String password, String firstName, String lastName, Integer receive,
					Integer suscribe, String url, String phone, String msgExamples, String about, String identificationKey, Integer dataSent, String identificationValue, Integer follower, Integer gray)
	{
		this.name					= name;
		this.industry				= industry;
		this.industryCode			= industryCode;
		this.email					= email;
		this.fromNumbers			= fromNumbers;
		this.silenced				= silenced;
		this.blocked				= blocked;
		this.image					= image;
		this.colorHex				= colorHex;
		this.type					= type;
		this.keywords				= keywords;
		this.unsuscribe				= unsuscribe;
		this.status					= status;
		this.countryCode			= countryCode;
		this.companyId				= companyId;
		this.size					= size;
		this.password				= password;
		this.firstName				= firstName;
		this.lastName				= lastName;
		this.receive				= receive;
		this.suscribe				= suscribe;
		this.url					= url;
		this.phone					= phone;
		this.msgExamples			= msgExamples;
		this.about					= about;
		this.identificationKey		= identificationKey;
		this.dataSent				= dataSent;
		this.identificationValue	= identificationValue;
		this.follower				= follower;
		this.gray					= gray;
	}

	public Company(	Long id, String companyId, String name, String countryCode, String industryCode, String industry, Integer type, String image, String colorHex, String fromNumbers, String keywords,
					String unsuscribe, Integer size, Integer status, Integer silenced, Integer blocked, String email, String firstName, String lastName, String password, Integer receive, Integer suscribe,
					String url, String phone, String msgExamples, String about, String identificationKey, Integer dataSent, String identificationValue, Integer follower, Integer gray)
	{
		this.id						= id;
		this.companyId				= companyId;
		this.name					= name;
		this.countryCode			= countryCode;
		this.industryCode			= industryCode;
		this.industry				= industry;
		this.type					= type;
		this.image					= image;
		this.colorHex				= colorHex;
		this.fromNumbers			= fromNumbers;
		this.keywords				= keywords;
		this.unsuscribe				= unsuscribe;
		this.size					= size;
		this.status					= status;
		this.silenced				= silenced;
		this.blocked				= blocked;
		this.email					= email;
		this.firstName				= firstName;
		this.lastName				= lastName;
		this.password				= password;
		this.receive				= receive;
		this.suscribe				= suscribe;
		this.url					= url;
		this.phone					= phone;
		this.msgExamples			= msgExamples;
		this.about					= about;
		this.identificationKey		= identificationKey;
		this.dataSent				= dataSent;
		this.identificationValue	= identificationValue;
		this.follower				= follower;
		this.gray					= gray;
	}

	public Long getId()
	{
		return id;
	}

	public void setId(Long id)
	{
		this.id = id;
	}

	public String getName()
	{
		if(name != null)
		{
			return name;
		}
		else
		{
			return "";
		}
	}

	public void setName(String name)
	{
		this.name = name;
	}

	public String getIndustry()
	{
		if(industry != null)
		{
			return industry;
		}
		else
		{
			return "";
		}
	}

	public void setIndustry(String industry)
	{
		this.industry = industry;
	}

	public String getEmail()
	{
		if(email != null)
		{
			return email;
		}
		else
		{
			return "";
		}
	}

	public String getIndustryCode()
	{
		if(industryCode != null)
		{
			return industryCode;
		}
		else
		{
			return "";
		}
	}

	public void setIndustryCode(String industryCode)
	{
		this.industryCode = industryCode;
	}

	public void setEmail(String email)
	{
		this.email = email;
	}

	public String getFromNumbers()
	{
		//Adaptación a nuevo formato de jsonArray
		if(fromNumbers != null)
		{
			if(StringUtils.isNotEmpty(fromNumbers))
			{
				return fromNumbers;
			}
			else
			{
				return "[]";
			}
		}
		else
		{
			return "[]";
		}
	}

	public Integer getSuscribe()
	{
		if(suscribe != null)
		{
			return suscribe;
		}
		else
		{
			return Common.BOOL_NO;
		}
	}

	public void setSuscribe(final Integer suscribe)
	{
		this.suscribe = suscribe;
	}

	public String getUrl()
	{
		if(url != null)
		{
			return url;
		}
		else
		{
			return "";
		}
	}

	public void setUrl(final String url)
	{
		this.url = url;
	}

	public String getPhone()
	{
		if(phone != null)
		{
			return phone;
		}
		else
		{
			return "";
		}
	}

	public void setPhone(final String phone)
	{
		this.phone = phone;
	}

	public String getMsgExamples()
	{
		if(msgExamples != null)
		{
			if(StringUtils.isNotEmpty(msgExamples))
			{
				return msgExamples;
			}
			else
			{
				return "[]";
			}
		}
		else
		{
			return "[]";
		}
	}

	public void setMsgExamples(final String msgExamples)
	{
		this.msgExamples = msgExamples;
	}

	public Integer getSize()
	{
		if(size != null)
		{
			return size;
		}
		else
		{
			return Common.BOOL_NO;
		}
	}

	public void setSize(Integer size)
	{
		this.size = size;
	}

	public String getPassword()
	{
		if(password != null)
		{
			return password;
		}
		else
		{
			return "";
		}
	}

	public void setPassword(String password)
	{
		this.password = password;
	}

	public void setFromNumbers(String fromNumbers)
	{
		this.fromNumbers = fromNumbers;
	}

	public int getSilenced()
	{
		if(silenced != null)
		{
			return silenced;
		}
		else
		{
			return Common.BOOL_NO;
		}
	}

	public void setSilenced(final int silenced)
	{
		this.silenced = silenced;
	}

	public int getBlocked()
	{
		if(blocked != null)
		{
			return blocked;
		}
		else
		{
			return Common.BOOL_NO;
		}
	}

	public void setBlocked(final int blocked)
	{
		this.blocked = blocked;
	}

	public Integer getReceive()
	{
		if(receive != null)
		{
			return receive;
		}else
		{
			return Common.BOOL_NO;
		}
	}

	public void setReceive(final int receive)
	{
		this.receive = receive;
	}

	public String getImage()
	{
		if(image != null)
		{
			return image;
		}
		else
		{
			return "";
		}
	}

	public void setImage(final String image)
	{
		this.image = image;
	}

	public String getColorHex()
	{
		if(colorHex != null)
		{
			return colorHex;
		}
		else
		{
			return "";
		}
	}

	public void setColorHex(final String colorHex)
	{
		this.colorHex = colorHex;
	}

	public String getKeywords()
	{
		if(keywords != null)
		{
			return keywords;
		}
		else
		{
			return "";
		}
	}

	public void setKeywords(final String keywords)
	{
		this.keywords = keywords;
	}

	public String getUnsuscribe()
	{
		if(unsuscribe != null)
		{
			return unsuscribe;
		}
		else
		{
			return "";
		}
	}

	public void setUnsuscribe(final String unsuscribe)
	{
		this.unsuscribe = unsuscribe;
	}

	public int getType()
	{
		if(type != null)
		{
			return type;
		}
		else
		{
			return TYPE_AUTOGENERATED;
		}
	}

	public void setType(int type)
	{
		this.type = type;
	}

	public int getStatus()
	{
		if(status != null)
		{
			return status;
		}
		else
		{
			return STATUS_ACTIVE;
		}
	}

	public void setStatus(int status)
	{
		this.status = status;
	}

	public String getCountryCode()
	{
		if(countryCode != null)
		{
			return countryCode;
		}
		else
		{
			return "";
		}
	}

	public void setCountryCode(String countryCode)
	{
		this.countryCode = countryCode;
	}

	public String getCompanyId()
	{
		if(companyId != null)
		{
			return companyId;
		}
		else
		{
			return "";
		}
	}

	public void setCompanyId(String companyId)
	{
		this.companyId = companyId;
	}

	public String getFirstName()
	{
		if(firstName != null)
		{
			return firstName;
		}
		else
		{
			return "";
		}
	}

	public void setFirstName(String firstName)
	{
		this.firstName = firstName;
	}

	public String getLastName()
	{
		if(lastName != null)
		{
			return lastName;
		}
		else
		{
			return "";
		}
	}

	public void setLastName(String lastName)
	{
		this.lastName = lastName;
	}

	public String getAbout()
	{
		if(about != null)
		{
			return about;
		}
		else
		{
			return "";
		}
	}

	public void setAbout(final String about)
	{
		this.about = about;
	}

	public String getIdentificationKey()
	{
		if(identificationKey != null)
		{
			return identificationKey;
		}
		else
		{
			return "";
		}
	}

	public void setIdentificationKey(final String identificationKey)
	{
		this.identificationKey = identificationKey;
	}

	public Integer getDataSent()
	{
		if(dataSent != null)
		{
			return dataSent;
		}
		else
		{
			return Common.BOOL_NO;
		}
	}

	public void setDataSent(final int dataSent)
	{
		this.dataSent = dataSent;
	}

	public String getIdentificationValue()
	{
		if(identificationValue != null)
		{
			return identificationValue;
		}
		else
		{
			return "";
		}
	}

	public void setIdentificationValue(final String identificationValue)
	{
		this.identificationValue = identificationValue;
	}

	public Integer getFollower()
	{
		if(follower != null)
		{
			return follower;
		}
		else
		{
			return Common.BOOL_NO;
		}
	}

	public void setFollower(final Integer follower)
	{
		this.follower = follower;
	}

	public Integer getGray()
	{
		if(gray != null)
		{
			return gray;
		}
		else
		{
			return Common.BOOL_NO;
		}
	}

	public void setGray(final Integer gray)
	{
		this.gray = gray;
	}

	public void debug()
	{
		System.out.println("Company - id: " + id);
		System.out.println("Company - name: " + name);
		System.out.println("Company - industry: " + industry);
		System.out.println("Company - industryCode: " + industryCode);
		System.out.println("Company - email: " + email);
		System.out.println("Company - fromNumbers: " + fromNumbers);
		System.out.println("Company - silenced: " + silenced);
		System.out.println("Company - blocked: " + blocked);
		System.out.println("Company - image: " + image);
		System.out.println("Company - colorHex: " + colorHex);
		System.out.println("Company - type: " + type);
		System.out.println("Company - keywords: " + keywords);
		System.out.println("Company - unsuscribe: " + unsuscribe);
		System.out.println("Company - status: " + status);
		System.out.println("Company - countryCode: " + countryCode);
		System.out.println("Company - companyId: " + companyId);
		System.out.println("Company - firstName: " + firstName);
		System.out.println("Company - lastName: " + lastName);
		System.out.println("Company - size: " + size);
		System.out.println("Company - password: " + password);
		System.out.println("Company - receive: " + receive);
		System.out.println("Company - suscribe: " + suscribe);
		System.out.println("Company - url: " + url);
		System.out.println("Company - phone: " + phone);
		System.out.println("Company - msgExamples: " + msgExamples);
		System.out.println("Company - about: " + about);
		System.out.println("Company - identificationKey: " + identificationKey);
		System.out.println("Company - dataSent: " + dataSent);
		System.out.println("Company - identificationValue: " + identificationValue);
		System.out.println("Company - follower: " + follower);
		System.out.println("Company - gray: " + gray);
	}

	public static void parseList(JSONArray jsonArray, Context context, CompanyDao companyDao, boolean update, Realm realm, MessageDao messageDao)
	{
		try
		{
			//Agregado para validar dao con sessión
			if(companyDao != null)
			{
				companyDao.getDatabase().beginTransaction();
			}

			if(jsonArray != null)
			{
				if(jsonArray.length() > 0)
				{
					List<Company> companies = null;
					//Agregado para evitar consultas por companies
					if(update)
					{
						if(companyDao != null)
						{
							companies = companyDao.queryBuilder().list();
						}
					}

					for(int i = 0; i < jsonArray.length(); i++)
					{
						parseEntity(jsonArray.getJSONObject(i), companyDao, "", "", context, update, companies, realm, messageDao);
					}
				}
				else
				{
					if(!update)
					{
						Company vc = new Company(context.getString(R.string.app_name), context.getString(R.string.app), "2", Common.MAIL_TWEEN, DEFAULT_SENDER + ",", Common.BOOL_NO,
								Common.BOOL_NO, ICON_APP, Common.COLOR_ACTION, TYPE_FREE_REGISTERED, context.getString(R.string.app_name) + ",", "", STATUS_ACTIVE, Country.DEFAULT_VALUE,
								COMPANY_ID_VC_MONGO, 30, "", "Via", "Celular", Common.BOOL_YES, Common.BOOL_YES, context.getString(R.string.url), "2614239139",
								"[{“title”:”Favorite Road Trips”,”msg”:”Tu credit con Banco Falabella cumple 180 días de mora el 02-12-2015, Urgente llama al 800 810 888 o al 0223906024 o acercate a nuestras…”,”created”:”1450370433000”}]",
								"Recibe notificaciones de vencimiento, promociones y novedades de "+context.getString(R.string.app_name), "", Common.BOOL_NO, "", Common.BOOL_YES, Common.BOOL_NO);

						if(companyDao != null)
						{
							companyDao.insert(vc);
						}

						realm.beginTransaction();
						Suscription suscription	= new Suscription();
						suscription				= Migration.companyToSuscription(suscription, vc);
						realm.copyToRealmOrUpdate(suscription);
						realm.commitTransaction();
					}
				}
			}
			else
			{
				if(!update)
				{
					Company vc = new Company(context.getString(R.string.app_name), context.getString(R.string.app), "2", Common.MAIL_TWEEN, DEFAULT_SENDER + ",", Common.BOOL_NO,
							Common.BOOL_NO, ICON_APP, Common.COLOR_ACTION, TYPE_FREE_REGISTERED, context.getString(R.string.app_name) + ",", "", STATUS_ACTIVE, Country.DEFAULT_VALUE,
							COMPANY_ID_VC_MONGO, 30, "", "Via", "Celular", Common.BOOL_YES, Common.BOOL_YES, context.getString(R.string.url), "2614239139",
							"[{“title”:”Favorite Road Trips”,”msg”:”Tu credit con Banco Falabella cumple 180 días de mora el 02-12-2015, Urgente llama al 800 810 888 o al 0223906024 o acercate a nuestras…”,”created”:”1450370433000”}]",
							"Recibe notificaciones de vencimiento, promociones y novedades de "+context.getString(R.string.app_name), "", Common.BOOL_NO, "", Common.BOOL_YES, Common.BOOL_NO);

					if(companyDao != null)
					{
						companyDao.insert(vc);
					}

					realm.beginTransaction();
					Suscription suscription	= new Suscription();
					suscription				= Migration.companyToSuscription(suscription, vc);
					realm.copyToRealmOrUpdate(suscription);
					realm.commitTransaction();
				}
			}

			//Agregado para validar dao con sessión
			if(companyDao != null)
			{
				companyDao.getDatabase().setTransactionSuccessful();
				companyDao.getDatabase().endTransaction();
			}
		}
		catch(Exception e)
		{
			System.out.println("Company:parseList - Exception: " + e);
			if(Common.DEBUG)
			{
				e.printStackTrace();
			}
		}
	}

	public static Company parseEntity(	JSONObject jsonObject, CompanyDao companyDao, String companyId, String countryCode, Context context, boolean update, List<Company> companyList,
										Realm realm, MessageDao messageDao)
	{
		Company company = null;
		try
		{
			String jCompanyId			= "";
			String jName				= "";
			String jIndustry			= "";
			String jIndustryCode		= "";
			String jEmail				= "";
			String jFromNumbers			= "[]";
			Integer jSilenced			= Common.BOOL_NO;
			Integer jBlocked			= Common.BOOL_NO;
			String jImage				= "";
			String jColorHex			= Common.COLOR_ACTION;
			Integer jType				= Company.TYPE_AUTOGENERATED;
			String jKeywords			= "";
			String jUnsuscribe			= "";
			Integer jStatus				= Company.STATUS_ACTIVE;
			String jCountryCode			= "";
			Integer jSize				= 0;
			String jPassword			= "";
			String jFirstName			= "";
			String jLastName			= "";
			Integer jReceive			= Common.BOOL_NO;
			Integer jSuscribe			= Common.BOOL_NO;
			String jUrl					= "";
			String jPhone				= "";
			String jMsgExamples			= "[]";
			boolean findOutType			= false;
			String jAbout				= "";
			String jIdentificationKey	= "";
			Integer jDataSent			= Common.BOOL_NO;
			String jIdentificationValue	= "";
			Integer jFollower			= Common.BOOL_NO;
			Integer jGray				= Common.BOOL_NO;

			if(jsonObject != null)
			{
				if(jsonObject.has(Common.KEY_ID))
				{
					if(!jsonObject.isNull(Common.KEY_ID))
					{
						if(StringUtils.isNotEmpty(jsonObject.getString(Common.KEY_ID)))
						{
							jCompanyId = jsonObject.getString(Common.KEY_ID);
						}
					}
				}
				else
				{
					//Agregado para contemplar campo _id como id en el GET companies/companyId
					if(jsonObject.has(Common.KEY_IDMONGO))
					{
						if(!jsonObject.isNull(Common.KEY_IDMONGO))
						{
							if(StringUtils.isNotEmpty(jsonObject.getString(Common.KEY_IDMONGO)))
							{
								jCompanyId = jsonObject.getString(Common.KEY_IDMONGO);
							}
						}
					}
				}

				if(jsonObject.has(Common.KEY_NAME))
				{
					if(!jsonObject.isNull(Common.KEY_NAME))
					{
						if(StringUtils.isNotEmpty(jsonObject.getString(Common.KEY_NAME)))
						{
							jName = jsonObject.getString(Common.KEY_NAME);
						}
					}
				}

				if(jsonObject.has(KEY_INDUSTRY))
				{
					if(!jsonObject.isNull(KEY_INDUSTRY))
					{
						if(StringUtils.isNotEmpty(jsonObject.getString(KEY_INDUSTRY)))
						{
							jIndustry = jsonObject.getString(KEY_INDUSTRY);
						}
					}
				}

				if(jsonObject.has(KEY_INDUSTRYCODE))
				{
					if(!jsonObject.isNull(KEY_INDUSTRYCODE))
					{
						if(StringUtils.isNotEmpty(jsonObject.getString(KEY_INDUSTRYCODE)))
						{
							jIndustryCode = jsonObject.getString(KEY_INDUSTRYCODE);
						}
					}
				}

				if(jsonObject.has(KEY_SILENCED))
				{
					if(!jsonObject.isNull(KEY_SILENCED))
					{
						if(StringUtils.isNumber(jsonObject.getString(KEY_SILENCED)))
						{
							jSilenced = jsonObject.getInt(KEY_SILENCED);
						}
					}
				}

				if(jsonObject.has(KEY_BLOCKED))
				{
					if(!jsonObject.isNull(KEY_BLOCKED))
					{
						if(StringUtils.isNumber(jsonObject.getString(KEY_BLOCKED)))
						{
							jBlocked = jsonObject.getInt(KEY_BLOCKED);
						}
					}
				}

				if(jsonObject.has(KEY_IMAGE))
				{
					if(!jsonObject.isNull(KEY_IMAGE))
					{
						if(StringUtils.isNotEmpty(jsonObject.getString(KEY_IMAGE)))
						{
							jImage = jsonObject.getString(KEY_IMAGE);
						}
					}
				}

				if(jsonObject.has(KEY_COLOR))
				{
					if(!jsonObject.isNull(KEY_COLOR))
					{
						if(StringUtils.isNotEmpty(jsonObject.getString(KEY_COLOR)))
						{
							jColorHex = "#" + jsonObject.getString(KEY_COLOR);
							jColorHex = jColorHex.replace("##", "#");
						}
					}
				}

				if(jsonObject.has(Common.KEY_TYPE))
				{
					if(!jsonObject.isNull(Common.KEY_TYPE))
					{
						if(StringUtils.isNumber(jsonObject.getString(Common.KEY_TYPE)))
						{
							jType		= Integer.valueOf(jsonObject.getString(Common.KEY_TYPE));
							findOutType	= true;
						}
					}
				}

				if(jsonObject.has(Common.KEY_STATUS))
				{
					if(!jsonObject.isNull(Common.KEY_STATUS))
					{
						if(StringUtils.isNumber(jsonObject.getString(Common.KEY_STATUS)))
						{
							jStatus = jsonObject.getInt(Common.KEY_STATUS);
						}
					}
				}

				if(jsonObject.has(Land.KEY_API))
				{
					if(!jsonObject.isNull(Land.KEY_API))
					{
						if(StringUtils.isNotEmpty(jsonObject.getString(Land.KEY_API)))
						{
							jCountryCode = jsonObject.getString(Land.KEY_API);
						}
					}
				}

				//Agregado para mostrar en LandingActivity
				if(jsonObject.has(KEY_ABOUT))
				{
					if(!jsonObject.isNull(KEY_ABOUT))
					{
						if(StringUtils.isNotEmpty(jsonObject.getString(KEY_ABOUT)))
						{
							jAbout = jsonObject.getString(KEY_ABOUT);
						}
					}
				}

				if(jsonObject.has(KEY_EMPLOYEES))
				{
					if(!jsonObject.isNull(KEY_EMPLOYEES))
					{
						JSONArray jsonArrEmployees = jsonObject.getJSONArray(KEY_EMPLOYEES);
						if(jsonArrEmployees != null)
						{
							if(!jsonArrEmployees.isNull(0))
							{
								JSONObject jsonEmployees = jsonArrEmployees.getJSONObject(0);

								if(jsonEmployees.has(User.KEY_EMAIL))
								{
									if(!jsonEmployees.isNull(User.KEY_EMAIL))
									{
										if(StringUtils.isNotEmpty(jsonEmployees.getString(User.KEY_EMAIL)))
										{
											jEmail = jsonEmployees.getString(User.KEY_EMAIL);
										}
									}
								}

								if(jsonEmployees.has(User.KEY_PASSWORD))
								{
									if(!jsonEmployees.isNull(User.KEY_PASSWORD))
									{
										if(StringUtils.isNotEmpty(jsonEmployees.getString(User.KEY_PASSWORD)))
										{
											jPassword = jsonEmployees.getString(User.KEY_PASSWORD);
										}
									}
								}

								if(jsonEmployees.has(User.KEY_FIRSTNAME))
								{
									if(!jsonEmployees.isNull(User.KEY_FIRSTNAME))
									{
										if(StringUtils.isNotEmpty(jsonEmployees.getString(User.KEY_FIRSTNAME)))
										{
											jFirstName = jsonEmployees.getString(User.KEY_FIRSTNAME);
										}
									}
								}

								if(jsonEmployees.has(User.KEY_LASTNAME))
								{
									if(!jsonEmployees.isNull(User.KEY_LASTNAME))
									{
										if(StringUtils.isNotEmpty(jsonEmployees.getString(User.KEY_LASTNAME)))
										{
											jLastName = jsonEmployees.getString(User.KEY_LASTNAME);
										}
									}
								}
							}
						}
					}
				}

				//Agregado para contemplar campos nuevos de la Company por si vienen fuera de info
				if(jsonObject.has(Company.KEY_RECEIVE))
				{
					if(!jsonObject.isNull(Company.KEY_RECEIVE))
					{
						if(StringUtils.isNotEmpty(jsonObject.getString(Company.KEY_RECEIVE)))
						{
							jReceive = jsonObject.getInt(Company.KEY_RECEIVE);
						}
					}
				}

				if(jsonObject.has(Company.KEY_SUSCRIBE))
				{
					if(!jsonObject.isNull(Company.KEY_SUSCRIBE))
					{
						if(StringUtils.isNotEmpty(jsonObject.getString(Company.KEY_SUSCRIBE)))
						{
							jSuscribe = jsonObject.getInt(Company.KEY_SUSCRIBE);
						}
					}
				}

				if(jsonObject.has(Company.KEY_URL))
				{
					if(!jsonObject.isNull(Company.KEY_URL))
					{
						if(StringUtils.isNotEmpty(jsonObject.getString(Company.KEY_URL)))
						{
							jUrl = jsonObject.getString(Company.KEY_URL);
						}
					}
				}

				if(jsonObject.has(User.KEY_PHONE))
				{
					if(!jsonObject.isNull(User.KEY_PHONE))
					{
						if(StringUtils.isNotEmpty(jsonObject.getString(User.KEY_PHONE)))
						{
							jPhone = jsonObject.getString(User.KEY_PHONE);
						}
					}
				}

				if(jsonObject.has(Company.KEY_MSGEXAMPLES))
				{
					if(!jsonObject.isNull(Company.KEY_MSGEXAMPLES))
					{
						if(StringUtils.isNotEmpty(jsonObject.getString(Company.KEY_MSGEXAMPLES)))
						{
							jMsgExamples = jsonObject.getString(Company.KEY_MSGEXAMPLES);
						}
					}
				}

				if(jsonObject.has(User.KEY_EMAIL))
				{
					if(!jsonObject.isNull(User.KEY_EMAIL))
					{
						if(StringUtils.isNotEmpty(jsonObject.getString(User.KEY_EMAIL)))
						{
							jEmail = jsonObject.getString(User.KEY_EMAIL);
						}
					}
				}

				if(jsonObject.has(Common.KEY_INFO))
				{
					if(!jsonObject.isNull(Common.KEY_INFO))
					{
						jsonObject = jsonObject.getJSONObject(Common.KEY_INFO);
						if(jsonObject != null)
						{
							if(jsonObject.has(KEY_NUMBERS))
							{
								if(!jsonObject.isNull(KEY_NUMBERS))
								{
									if(StringUtils.isNotEmpty(jsonObject.getString(KEY_NUMBERS)))
									{
										//Modificación para recibir nuevo formato de jsonArray
										jFromNumbers = StringUtils.removeSpacesJSON(jsonObject.getString(KEY_NUMBERS));
									}
								}
							}

							if(jsonObject.has(KEY_KEYWORDS))
							{
								if(!jsonObject.isNull(KEY_KEYWORDS))
								{
									if(StringUtils.isNotEmpty(jsonObject.getString(KEY_KEYWORDS)))
									{
										jKeywords = StringUtils.fixListFields(jsonObject.getString(KEY_KEYWORDS) + ",");
									}
								}
							}

							if(jsonObject.has(KEY_UNSUSCRIBE))
							{
								if(!jsonObject.isNull(KEY_UNSUSCRIBE))
								{
									if(StringUtils.isNotEmpty(jsonObject.getString(KEY_UNSUSCRIBE)))
									{
										jUnsuscribe = jsonObject.getString(KEY_UNSUSCRIBE);
									}
								}
							}

							if(jsonObject.has(KEY_SIZE))
							{
								if(!jsonObject.isNull(KEY_SIZE))
								{
									if(StringUtils.isNumber(jsonObject.getString(KEY_SIZE)))
									{
										jSize = Integer.valueOf(jsonObject.getString(KEY_SIZE));
									}
								}
							}

							if(jsonObject.has(Common.KEY_NAME))
							{
								if(!jsonObject.isNull(Common.KEY_NAME))
								{
									if(StringUtils.isNotEmpty(jsonObject.getString(Common.KEY_NAME)))
									{
										jName = jsonObject.getString(Common.KEY_NAME);
									}
								}
							}

							if(jsonObject.has(KEY_INDUSTRY))
							{
								if(!jsonObject.isNull(KEY_INDUSTRY))
								{
									if(StringUtils.isNotEmpty(jsonObject.getString(KEY_INDUSTRY)))
									{
										jIndustry = jsonObject.getString(KEY_INDUSTRY);
									}
								}
							}

							if(jsonObject.has(KEY_INDUSTRYCODE))
							{
								if(!jsonObject.isNull(KEY_INDUSTRYCODE))
								{
									if(StringUtils.isNotEmpty(jsonObject.getString(KEY_INDUSTRYCODE)))
									{
										jIndustryCode = jsonObject.getString(KEY_INDUSTRYCODE);
									}
								}
							}

							if(jsonObject.has(KEY_IMAGE))
							{
								if(!jsonObject.isNull(KEY_IMAGE))
								{
									if(StringUtils.isNotEmpty(jsonObject.getString(KEY_IMAGE)))
									{
										jImage = jsonObject.getString(KEY_IMAGE);
									}
								}
							}

							if(jsonObject.has(KEY_COLOR))
							{
								if(!jsonObject.isNull(KEY_COLOR))
								{
									if(StringUtils.isNotEmpty(jsonObject.getString(KEY_COLOR)))
									{
										jColorHex	= "#" + jsonObject.getString(KEY_COLOR);
										jColorHex	= jColorHex.replace("##", "#");
									}
								}
							}

							if(jsonObject.has(Common.KEY_TYPE))
							{
								if(!jsonObject.isNull(Common.KEY_TYPE))
								{
									if(StringUtils.isNumber(jsonObject.getString(Common.KEY_TYPE)) && !findOutType)
									{
										jType = Integer.valueOf(jsonObject.getString(Common.KEY_TYPE));
									}
								}
							}

							if(jsonObject.has(Common.KEY_STATUS))
							{
								if(!jsonObject.isNull(Common.KEY_STATUS))
								{
									if(StringUtils.isNumber(jsonObject.getString(Common.KEY_STATUS)))
									{
										jStatus = jsonObject.getInt(Common.KEY_STATUS);
									}
								}
							}

							if(jsonObject.has(Land.KEY_API))
							{
								if(!jsonObject.isNull(Land.KEY_API))
								{
									if(StringUtils.isNotEmpty(jsonObject.getString(Land.KEY_API)))
									{
										jCountryCode = jsonObject.getString(Land.KEY_API);
									}
								}
							}

							if(jsonObject.has(KEY_SILENCED))
							{
								if(!jsonObject.isNull(KEY_SILENCED))
								{
									if(StringUtils.isNumber(jsonObject.getString(KEY_SILENCED)))
									{
										jSilenced = jsonObject.getInt(KEY_SILENCED);
									}
								}
							}

							if(jsonObject.has(KEY_BLOCKED))
							{
								if(!jsonObject.isNull(KEY_BLOCKED))
								{
									if(StringUtils.isNumber(jsonObject.getString(KEY_BLOCKED)))
									{
										jBlocked = jsonObject.getInt(KEY_BLOCKED);
									}
								}
							}

							//Agregado para contemplar campos nuevos de la Company por si vienen dentro de info
							if(jsonObject.has(Company.KEY_RECEIVE))
							{
								if(!jsonObject.isNull(Company.KEY_RECEIVE))
								{
									if(StringUtils.isNotEmpty(jsonObject.getString(Company.KEY_RECEIVE)))
									{
										jReceive = jsonObject.getInt(Company.KEY_RECEIVE);
									}
								}
							}

							if(jsonObject.has(Company.KEY_SUSCRIBE))
							{
								if(!jsonObject.isNull(Company.KEY_SUSCRIBE))
								{
									if(StringUtils.isNotEmpty(jsonObject.getString(Company.KEY_SUSCRIBE)))
									{
										jSuscribe = jsonObject.getInt(Company.KEY_SUSCRIBE);
									}
								}
							}

							if(jsonObject.has(Company.KEY_URL))
							{
								if(!jsonObject.isNull(Company.KEY_URL))
								{
									if(StringUtils.isNotEmpty(jsonObject.getString(Company.KEY_URL)))
									{
										jUrl = jsonObject.getString(Company.KEY_URL);
									}
								}
							}

							if(jsonObject.has(User.KEY_PHONE))
							{
								if(!jsonObject.isNull(User.KEY_PHONE))
								{
									if(StringUtils.isNotEmpty(jsonObject.getString(User.KEY_PHONE)))
									{
										jPhone = jsonObject.getString(User.KEY_PHONE);
									}
								}
							}

							if(jsonObject.has(Company.KEY_MSGEXAMPLES))
							{
								if(!jsonObject.isNull(Company.KEY_MSGEXAMPLES))
								{
									if(StringUtils.isNotEmpty(jsonObject.getString(Company.KEY_MSGEXAMPLES)))
									{
										jMsgExamples = jsonObject.getString(Company.KEY_MSGEXAMPLES);
									}
								}
							}

							if(jsonObject.has(User.KEY_EMAIL))
							{
								if(!jsonObject.isNull(User.KEY_EMAIL))
								{
									if(StringUtils.isNotEmpty(jsonObject.getString(User.KEY_EMAIL)))
									{
										jEmail = jsonObject.getString(User.KEY_EMAIL);
									}
								}
							}

							//Agregado para contemplar campo de identificación en empresa
							if(jsonObject.has(KEY_IDENTIFICATIONKEY))
							{
								if(!jsonObject.isNull(KEY_IDENTIFICATIONKEY))
								{
									if(StringUtils.isNotEmpty(jsonObject.getString(KEY_IDENTIFICATIONKEY)))
									{
										jIdentificationKey = jsonObject.getString(KEY_IDENTIFICATIONKEY);
									}
								}
							}

							if(jsonObject.has(Company.KEY_DATASENT))
							{
								if(!jsonObject.isNull(Company.KEY_DATASENT))
								{
									if(StringUtils.isNotEmpty(jsonObject.getString(Company.KEY_DATASENT)))
									{
										jDataSent = jsonObject.getInt(Company.KEY_DATASENT);
									}
								}
							}

							//Agregado para contemplar valor de id de identificación en empresa
							if(jsonObject.has(KEY_IDENTIFICATIONVALUE))
							{
								if(!jsonObject.isNull(KEY_IDENTIFICATIONVALUE))
								{
									if(StringUtils.isNotEmpty(jsonObject.getString(KEY_IDENTIFICATIONVALUE)))
									{
										jIdentificationValue = jsonObject.getString(KEY_IDENTIFICATIONVALUE);
									}
								}
							}

							if(jsonObject.has(Company.KEY_GRAY))
							{
								if(!jsonObject.isNull(Company.KEY_GRAY))
								{
									if(StringUtils.isNotEmpty(jsonObject.getString(Company.KEY_GRAY)))
									{
										jGray = jsonObject.getInt(Company.KEY_GRAY);
									}
								}
							}
						}
					}
				}

				if(!jKeywords.toUpperCase().contains(jName.toUpperCase()))
				{
					jKeywords = jName + "," + jKeywords;
				}
			}
			else
			{
				//Agregado para empresas no identificadas mediante push
				Company lastUnamed		= null;
				int number				= 1;
				List<Company> companies	= null;
				//Agregado para validar dao con sessión

				if(companyDao != null)
				{
					companies = companyDao.queryBuilder().where(CompanyDao.Properties.name.like(context.getString(R.string.company_unamed)+"%")).orderDesc(CompanyDao.Properties.name).limit(1).listLazyUncached();
				}

				//Agregado para prevenir lista sin resultados
				if(companies != null)
				{
					if(companies.size() > 0)
					{
						lastUnamed = companies.get(0);
					}

					if(lastUnamed != null)
					{
						String[] newName = lastUnamed.getName().split(" ");

						if(newName.length == 3)
						{
							if(StringUtils.isNumber(newName[2]))
							{
								number = Integer.parseInt(newName[2])+1;
							}
						}
						else
						{
							if(StringUtils.isNumber(newName[1]))
							{
								number = Integer.parseInt(newName[1])+1;
							}
						}
					}
				}

				company			= new Company();
				jName			= context.getString(R.string.company_unamed)+" "+number;
				jCountryCode	= countryCode;
				jCompanyId		= companyId;
				jIndustry		= context.getString(R.string.app);
				jIndustryCode	= "2";
			}

			company = new Company(	jName, jIndustry, jIndustryCode, jEmail, jFromNumbers, jSilenced, jBlocked, jImage, jColorHex, jType, jKeywords, jUnsuscribe, jStatus, jCountryCode, jCompanyId,
									jSize, jPassword, jFirstName, jLastName, jReceive, jSuscribe, jUrl, jPhone, jMsgExamples, jAbout, jIdentificationKey, jDataSent, jIdentificationValue, jFollower,
									jGray);
			company.setReceive(Common.BOOL_YES);

			//Agregado para actualizar companies mediante pull update
			if(update)
			{
				boolean exists = false;

				if(companyList != null)
				{
					if(companyList.size() > 0)
					{
						for(Company existingCompany : companyList)
						{
							if(existingCompany.getCompanyId().equals(company.getCompanyId()))
							{
								//Refrescar los datos de la company, reorganización de campos nuevos
								existingCompany.setName(company.getName());
								existingCompany.setIndustry(company.getIndustry());
								existingCompany.setIndustryCode(company.getIndustryCode());
								existingCompany.setEmail(company.getEmail());
								existingCompany.setFromNumbers(company.getFromNumbers());
								existingCompany.setImage(company.getImage());
								existingCompany.setColorHex(company.getColorHex());
								existingCompany.setType(company.getType());
								existingCompany.setKeywords(company.getKeywords());
								existingCompany.setUnsuscribe(company.getUnsuscribe());
								existingCompany.setStatus(company.getStatus());
								existingCompany.setCountryCode(company.getCountryCode());
								existingCompany.setSize(company.getSize());
								existingCompany.setPassword(company.getPassword());
								existingCompany.setFirstName(company.getFirstName());
								existingCompany.setLastName(company.getLastName());
								existingCompany.setUrl(company.getUrl());
								existingCompany.setPhone(company.getPhone());
								existingCompany.setMsgExamples(company.getMsgExamples());
								existingCompany.setAbout(company.getAbout());
								existingCompany.setIdentificationKey(company.getIdentificationKey());
								companyDao.update(existingCompany);
								//Los campos internos no se actualizan para no perder la configuración local: silenced, blocked, receive, suscribe, dataSent, identificationValue, follower, gray

								//Agregado para futura migración a Realm
								Suscription suscription	= realm.where(Suscription.class).equalTo(KEY_API, existingCompany.getCompanyId()).findFirst();
								realm.beginTransaction();
								suscription				= Migration.companyToSuscription(suscription, existingCompany);
								realm.copyToRealmOrUpdate(suscription);
								realm.commitTransaction();
								exists = true;
								break;
							}
						}
					}
				}

				//Nueva company
				if(!exists)
				{
					if(companyDao != null)
					{
						companyDao.insert(company);
					}

					realm.beginTransaction();
					Suscription suscription	= new Suscription();
					suscription				= Migration.companyToSuscription(suscription, company);
					realm.copyToRealmOrUpdate(suscription);
					realm.commitTransaction();
				}
			}
			else
			{
				//Modificación para suscribir la company si tiene mensajes al iniciar
				List<Message> messages = new ArrayList<>();

				if(messageDao != null)
				{
					messages = messageDao.queryBuilder().where(MessageDao.Properties.companyId.eq(company.getCompanyId())).listLazyUncached();
				}

				if(messages.size() > 0)
				{
					company.setFollower(Common.BOOL_YES);
				}

				if(company.getCompanyId().equals(COMPANY_ID_VC_MONGO))
				{
					company.setFollower(Common.BOOL_YES);
				}

				if(companyDao != null)
				{
					companyDao.insert(company);
				}

				realm.beginTransaction();
				Suscription suscription	= new Suscription();
				suscription				= Migration.companyToSuscription(suscription, company);
				realm.copyToRealmOrUpdate(suscription);
				realm.commitTransaction();
			}
		}
		catch(Exception e)
		{
			System.out.println("Company:parseEntity - Exception: " + e);
			if(Common.DEBUG)
			{
				e.printStackTrace();
			}
		}

		return company;
	}

	//Agregado para verificar número corto con el nuevo formato
	public boolean hasNumber(String number)
	{
		boolean result = false;

		//Agregado para corregir formato de campo
		if(StringUtils.removeSpacesJSON(getFromNumbers()).replace("+", "").contains("\"" + number.replace("+", "") + "\""))
		{
			result = true;
		}

		return result;
	}

	/**
	 * Genera una company vacía para empresas no detectadas
	 * @param companyDao Dao con sessión en la para persistir
	 * @param fewness Número corto origen
	 * @param context
	 * @param countryCode
	 * @return Company
	 */
	public static Company createPhantom(CompanyDao companyDao, String fewness, Context context, String countryCode)
	{
		Company client	= new Company();
		Realm realm		= null;

		try
		{
			realm = Realm.getDefaultInstance();
			client.setName(fewness);
			client.setIndustry(context.getString(R.string.app));
			client.setIndustryCode("2");
			client.setCountryCode(countryCode);
			client.setSilenced(Common.BOOL_NO);
			client.setBlocked(Common.BOOL_NO);
			client.setImage("");
			client.setColorHex(Common.COLOR_ACTION);
			client.setType(Company.TYPE_AUTOGENERATED);
			client.setUnsuscribe("");
			client.setCompanyId("0");
			client.setReceive(Common.BOOL_NO);
			client.addNumber(fewness, Company.NUMBER_FREE);
			client.setSuscribe(Common.BOOL_YES);
			client.setUrl("");
			client.setPhone("");
			client.setMsgExamples("[]");
			client.setAbout("");
			client.setIdentificationKey("");
			client.setDataSent(Common.BOOL_NO);
			client.setIdentificationValue("");
			client.setFollower(Common.BOOL_YES);
			client.setGray(Common.BOOL_NO);

			if(!StringUtils.isNumber(fewness) && !StringUtils.isLong(fewness))
			{
				client.setKeywords(fewness + ",");
			}

			if(companyDao != null)
			{
				companyDao.insert(client);
				client.setCompanyId(String.valueOf(companyDao.getKey(client)));
				companyDao.update(client);
				realm.beginTransaction();
				Suscription suscription	= new Suscription();
				suscription				= Migration.companyToSuscription(suscription, client);
				realm.copyToRealmOrUpdate(suscription);
				realm.commitTransaction();
			}
		}
		catch(Exception e)
		{
			System.out.println("Company:createPhantom - Exception: " + e);
			if(Common.DEBUG)
			{
				e.printStackTrace();
			}
		}

		return client;
	}

	//Agregado para incorporar número corto al nuevo formato
	public boolean addNumber(String number, String type)
	{
		//Agregado para evitar excepciones y para futura migración a Realm
		try
		{
			if(!hasNumber(number))
			{
				setFromNumbers(StringUtils.removeSpacesJSON(getFromNumbers()).replace("]", ",") + "{\"from\":\"" + number.replace("+", "") + "\",\"type\":\"" + type + "\"}]");
				Realm realm				= Realm.getDefaultInstance();
				Suscription suscription	= realm.where(Suscription.class).equalTo(KEY_API, getCompanyId()).findFirst();
				realm.beginTransaction();
				suscription.setFromNumbers(StringUtils.removeSpacesJSON(getFromNumbers()).replace("]", ",") + "{\"from\":\"" + number.replace("+", "") + "\",\"type\":\"" + type + "\"}]");
				realm.commitTransaction();

				return true;
			}
		}
		catch(Exception e)
		{
			System.out.println("Company:addNumber - Exception: " + e);
			if(Common.DEBUG)
			{
				e.printStackTrace();
			}
		}

		return false;
	}

	//Agregado para obtener type de un número corto
	public String getTypeNumber(String number)
	{
		try
		{
			//Modificaciones en la validaciones
			if(hasNumber(number))
			{
				//Agregado para corregir formato de campo
				JSONArray jsonArray = new JSONArray(StringUtils.removeSpacesJSON(getFromNumbers()));

				if(jsonArray.length() > 0)
				{
					for(int i = 0; i < jsonArray.length(); i++)
					{
						//Validación para búsqueda de número en el home
						if(!jsonArray.isNull(i))
						{
							JSONObject jsonObject = jsonArray.getJSONObject(i);

							if(jsonObject != null)
							{
								if(StringUtils.isNotEmpty(jsonObject.toString()))
								{
									if(jsonObject.getString(KEY_FROM).equals(number.replace("+", "")))
									{
										return jsonObject.getString(Common.KEY_TYPE);
									}
								}
							}
						}
					}
				}
			}
		}
		catch(Exception e)
		{
			System.out.println("Company:getTypeNumber - Exception: " + e);
			if(Common.DEBUG)
			{
				e.printStackTrace();
			}
		}

		return "";
	}

	//Agregado para verificar si la Company posee al menos un número corto pago en base a los mensajes
	public boolean isRevenue(List<Message> notifications)
	{
		boolean result = false;

		if(notifications.size() > 0)
		{
			//Modificación para mejorar rendimiento
			for(Message message : notifications)
			{
				//Agregado para corregir formato de campo
				if(StringUtils.removeSpacesJSON(getFromNumbers()).contains("\"" + message.getChannel().replace("+", "") + "\""))
				{
					if(this.getTypeNumber("\"" + message.getChannel().replace("+", "") + "\"").equals(Company.NUMBER_PAYOUT))
					{
						return true;
					}
				}
			}
		}

		return result;
	}

	/**
	 * Busca el texto que debe enviarse en el sms de baja
	 * @return String
	 */
	public String searchUnsuscribeMessage(Context context)
	{
		String result = context.getString(android.R.string.cancel).toUpperCase();

		if(StringUtils.isNotEmpty(getUnsuscribe().trim()))
		{
			String[] method = getUnsuscribe().trim().split(",");

			if(StringUtils.isValidUnsuscribe(method))
			{
				if(StringUtils.isNotEmpty(method[1].trim()))
				{
					result = method[1].trim();
				}
			}
		}

		return result;
	}

	/**
	 * Busca el número al que debe enviarse el sms de baja
	 * @return String
	 */
	public String searchUnsuscribeNumber(List<Message> messages)
	{
		String result = "";
		//En primer instancia nos fijamos el fromNumbers
		try
		{
			if(messages != null)
			{
				if(messages.size() > 0)
				{
					boolean noFoundInMessage	= true;
					Message message				= messages.get(0);

					if(message != null)
					{
						if(StringUtils.isNotEmpty(message.getChannel()))
						{
							if(StringUtils.isCompanyNumber(message.getChannel()))
							{
								noFoundInMessage	= false;
								result				= message.getChannel();
							}
						}
					}

					if(noFoundInMessage)
					{
						String number		= "";
						JSONArray jsonArray	= new JSONArray(StringUtils.removeSpacesJSON(getFromNumbers()));

						if(jsonArray.length() > 0)
						{
							for(int i = 0; i < jsonArray.length(); i++)
							{
								//Validación para búsqueda de número en el home
								if(!jsonArray.isNull(i))
								{
									JSONObject jsonObject = jsonArray.getJSONObject(i);

									if(jsonObject != null)
									{
										if(StringUtils.isNotEmpty(jsonObject.toString()))
										{
											if(jsonObject.has(KEY_FROM) && jsonObject.has(Common.KEY_TYPE))
											{
												number = jsonObject.getString(KEY_FROM).trim();

												if(jsonObject.getString(Common.KEY_TYPE).trim().equals(Company.NUMBER_PAYOUT))
												{
													break;
												}
											}
										}
									}
								}
							}

							result = number;
						}
					}

					//Por si no encontramos nos fijamos en el método Unsuscribe con formato csv por ej: SMS,BAJA,60700
					if(StringUtils.isNotEmpty(getUnsuscribe().trim()))
					{
						String[] method = getUnsuscribe().trim().split(",");

						if(StringUtils.isValidUnsuscribe(method))
						{
							result = method[2];
						}
					}
				}
			}
		}
		catch(Exception e)
		{
			System.out.println("Company:searchUnsuscribeNumber - Exception: " + e);
			if(Common.DEBUG)
			{
				e.printStackTrace();
			}
		}

		return result;
	}
}